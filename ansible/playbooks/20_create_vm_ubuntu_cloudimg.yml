- name: Create an Ubuntu Server VM via cloud image (libvirt)
  hosts: Aurelius
  become: true
  gather_facts: true

  vars:
    vm_name: "ubuntu-lab01"
    vm_memory_mb: 2048
    vm_vcpus: 2
    vm_disk_gb: 16
    vm_network: "default"       # NAT network (virbr0)
    vm_os_variant: "ubuntu22.04"

    # Download locations on the host
    images_dir: "/var/lib/libvirt/images"
    cloud_img_url: "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img"
    cloud_img_file: "{{ images_dir }}/jammy-server-cloudimg-amd64.img"

    # cloud-init seed data
    ci_user: "lab"
    ci_hostname: "{{ vm_name }}"
    ci_pubkey_path: "/home/{{ ansible_user }}/.ssh/authorized_keys"

  tasks:
    - name: Ensure images directory exists
      file:
        path: "{{ images_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Download Ubuntu 22.04 cloud image if missing
      get_url:
        url: "{{ cloud_img_url }}"
        dest: "{{ cloud_img_file }}"
        mode: '0644'
      register: dl
      retries: 3
      delay: 5
      until: dl is succeeded

    - name: Create a working copy qcow2 with desired size
      command: >
        qemu-img create -f qcow2 -F qcow2 -b {{ cloud_img_file }}
        {{ images_dir }}/{{ vm_name }}.qcow2 {{ vm_disk_gb }}G
      args:
        creates: "{{ images_dir }}/{{ vm_name }}.qcow2"

    - name: Build cloud-init user-data (with your SSH keys)
      shell: |
        set -e
        TMPDIR=$(mktemp -d)
        cat > "$TMPDIR/user-data" <<UD
        #cloud-config
        hostname: {{ ci_hostname }}
        users:
          - name: {{ ci_user }}
            groups: sudo
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh_authorized_keys:
              {{ lookup('file', ci_pubkey_path).splitlines() | map('quote') | list | join('\n              ') }}
        package_update: true
        package_upgrade: true
        ssh_pwauth: false
        disable_root: true
        UD
        cat > "$TMPDIR/meta-data" <<MD
        instance-id: iid-{{ vm_name }}
        local-hostname: {{ ci_hostname }}
        MD
        cloud-localds {{ images_dir }}/{{ vm_name }}-seed.iso "$TMPDIR/user-data" "$TMPDIR/meta-data"
      args:
        executable: /bin/bash

    - name: Install VM via virt-install (headless)
      command: >
        virt-install
        --name {{ vm_name }}
        --memory {{ vm_memory_mb }}
        --vcpus {{ vm_vcpus }}
        --import
        --disk path={{ images_dir }}/{{ vm_name }}.qcow2,format=qcow2,bus=scsi
        --disk path={{ images_dir }}/{{ vm_name }}-seed.iso,device=cdrom
        --controller type=scsi,model=virtio-scsi
        --network network={{ vm_network }},model=virtio
        --graphics none
        --os-variant {{ vm_os_variant }}
        --noautoconsole
      args:
        creates: "/etc/libvirt/qemu/{{ vm_name }}.xml"

    - name: Start VM
      command: virsh start {{ vm_name }}
      register: startvm
      failed_when: startvm.rc not in [0,1]  # starting an already running VM returns 1
      changed_when: startvm.rc == 0

    - name: Wait for DHCP lease on the default network
      shell: |
        # Wait up to 90s for a DHCP lease to appear
        for i in $(seq 1 30); do
          ip=$(virsh domifaddr {{ vm_name }} --source agent 2>/dev/null | awk '/ipv4/ {print $4}' | cut -d/ -f1)
          if [ -n "$ip" ]; then echo "$ip"; exit 0; fi
          # fallback if qemu-guest-agent not available yet: parse lease database
          ip=$(awk '/{{ vm_name }}/{print $5}' /var/lib/libvirt/dnsmasq/default.leases | tail -n1)
          if [ -n "$ip" ]; then echo "$ip"; exit 0; fi
          sleep 3
        done
        exit 1
      args:
        executable: /bin/bash
      register: vm_ip_out
      changed_when: false

    - name: Show the discovered VM IP
      debug:
        msg: "VM {{ vm_name }} IP (NAT network): {{ vm_ip_out.stdout | default('unknown') }}"

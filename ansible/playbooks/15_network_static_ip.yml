- name: Enforce static IPv4 via NetworkManager
  hosts: parrot
  become: true
  gather_facts: false

  tasks:
    - name: Ensure NetworkManager is installed
      package:
        name: network-manager
        state: present

    - name: Ensure NetworkManager is running
      systemd:
        name: NetworkManager
        state: started
        enabled: true

    - name: Fail if interface is not defined
      fail:
        msg: "nm_iface is not set. Add it in ansible/host_vars/parrot.yml"
      when: nm_iface is not defined or nm_iface | length == 0

    - name: Get active NM connections (name:device)
      shell: nmcli -t -f NAME,DEVICE con show --active || true
      register: nm_active
      changed_when: false

    - name: Pick connection name bound to iface if not provided
      set_fact:
        nm_conn_name: "{{ (nm_active.stdout_lines | map('split', ':') | selectattr('1','equalto', nm_iface) | first | default(['','']))[0] }}"
      when: nm_conn_name is not defined or nm_conn_name | length == 0

    - name: Create a new connection if none exists (manual only)
      shell: nmcli con add type ethernet ifname "{{ nm_iface }}" con-name "static-{{ nm_iface }}" ip4 "{{ nm_ip_cidr }}"
      register: nm_created
      changed_when: "'successfully added' in (nm_created.stdout + nm_created.stderr | default('')) | lower"
      when: (nm_conn_name is not defined or nm_conn_name | length == 0) and nm_method == 'manual'

    - name: Set nm_conn_name to created one
      set_fact:
        nm_conn_name: "static-{{ nm_iface }}"
      when: (nm_conn_name is not defined or nm_conn_name | length == 0) and nm_method == 'manual'

    - name: Ensure IPv4 method (manual for static / auto for DHCP)
      command: nmcli con mod "{{ nm_conn_name }}" ipv4.method "{{ nm_method }}"

    - name: Configure static IP (manual only)
      command: nmcli con mod "{{ nm_conn_name }}" ipv4.addresses "{{ nm_ip_cidr }}"
      when: nm_method == 'manual'

    - name: Configure gateway (manual only)
      command: nmcli con mod "{{ nm_conn_name }}" ipv4.gateway "{{ nm_gateway }}"
      when: nm_method == 'manual'

    - name: Configure DNS servers
      command: nmcli con mod "{{ nm_conn_name }}" ipv4.dns "{{ (nm_dns | join(' ')) }}"

    - name: Bring connection up
      command: nmcli con up "{{ nm_conn_name }}"
      register: nm_up
      changed_when: nm_up.rc == 0

    - name: Show connection summary
      command: nmcli -f GENERAL,IP4 con show "{{ nm_conn_name }}"
      changed_when: false
